{"version":3,"sources":["webpack:///./src/pages/game.js"],"names":["GamePage","useState","useSelector","state","game","loading","centerBlocks","width","height","rocket","blocksLine","resultMessage","wall","dispatch","useDispatch","useInterval","length","moveLineDown","useEffect","setDimensions","window","innerWidth","innerHeight","firstCenterBlock","title","style","marginTop","type","class","onClick","start","startLine","gender","age","expressions","happy","map","a","key","x","y","colour","rotation","console","log","b","results","temp","forEach","push","setLoading"],"mappings":"2FAAA,4IAsMeA,UAlLE,WAAM,MAEyBC,mBAAS,GAFlC,aAkBjBC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,SAJ7BC,GAdmB,EAUnBC,aAVmB,EAWnBC,MAXmB,EAYnBC,OAZmB,EAanBC,OAbmB,EAcnBJ,SACAK,EAfmB,EAenBA,WACAC,EAhBmB,EAgBnBA,cACAC,EAjBmB,EAiBnBA,KAEIC,EAAWC,cAEjBC,aAAY,WAINL,GAAcA,EAAWM,OAAS,GACpCH,EAASI,iBAEV,KAEHF,aAAY,cAGT,KAEHG,qBAAU,WAGRL,EACEM,YAAc,CAAEZ,MAAOa,OAAOC,WAAYb,OAAQY,OAAOE,eAK3DT,EAASU,iBASR,IA0BH,OACE,kBAAC,IAAD,KAGE,kBAAC,IAAD,CAAKC,MAAM,SAEVnB,GAAW,4BAAKA,GAChBM,GAAiB,4BAAKA,GACvB,4BACEc,MAAO,CAAEC,UAAW,QACpBC,KAAK,SACLC,MAAM,qBACNC,QAAS,kBAAMhB,EAASiB,iBAJ1B,SAQA,4BACEL,MAAO,CAAEC,UAAW,QACpBC,KAAK,SACLC,MAAM,qBACNC,QAAS,WACP,IAAInB,EAAW,CAIfG,EAASkB,YAHI,CACX,CAAEC,OAAQ,OAAQC,IAAK,GAAIC,YAAa,CAAC,CAAEC,MAAO,YAPxD,QAqBCzB,GACCA,EAAW0B,KAAI,SAAAC,GAAC,OACd,kBAAC,IAAD,CACEC,IAAG,IAAKD,EAAEE,EAAIF,EAAEG,GAChBD,EAAGF,EAAEE,EACLC,EAAGH,EAAEG,EACLC,OAAQJ,EAAEI,OACVC,SAAU,OAIfC,QAAQC,IAAI,OAAQhC,GACpBA,GACCA,EAAKwB,KAAI,SAAAS,GAAC,OACRA,EAAET,KAAI,SAAAC,GAAC,OACL,kBAAC,IAAD,CACEC,IAAG,IAAKD,EAAEE,EAAIF,EAAEG,GAChBD,EAAGF,EAAEE,EACLC,EAAGH,EAAEG,EACLC,OAAQJ,EAAEI,OACVC,SAAU,UAKlB,kBAAC,IAAD,CACEI,QAAS,SAAAT,GACP,IAAMU,EAAO,GACbV,EAAEW,SAAQ,SAAAX,GACRU,EAAKE,KAAK,CACRjB,OAAQK,EAAEL,OACVC,IAAKI,EAAEJ,IACPC,YAAaG,EAAEH,iBAMfxB,EAKFG,EAASqC,YAAW,mCAJtBrC,EAASkB,YAAUgB,IACnBlC,EAASqC,YAAW,QAKpBP,QAAQC,IAAI,mBAAoBP","file":"component---src-pages-game-js-ec996257d9b4ea0f6315.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Link } from \"gatsby\"\n// import {useIn}\nimport Layout from \"../components/layout\"\nimport Image from \"../components/image\"\nimport SEO from \"../components/seo\"\nimport Block from \"../components/block\"\nimport { useInterval, blockSize } from \"../components/utils\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport {\n  addBlock,\n  setDimensions,\n  firstCenterBlock,\n  setRocket,\n  start,\n  startLine,\n  moveLineDown,\n  setLoading\n} from \"../store/store\"\nimport FaceThing from \"../components/faceThing\"\nconst GamePage = () => {\n  // const [w, setW] = useState(300)\n  const [currentRotation, setCurrentRotation] = useState(0)\n\n  // const [startX, setStartX] = useState(3)\n  // const [startY, setStartY] = useState(1)\n\n  // const [rocket, setRocket] = useState(200000)\n\n  const {\n    centerBlocks,\n    width,\n    height,\n    rocket,\n    loading,\n    blocksLine,\n    resultMessage,\n    wall,\n  } = useSelector(state => state.game)\n  const dispatch = useDispatch()\n\n  useInterval(() => {\n    // setStartY(startY+1)\n    // console.log('rocket.y', rocket.y)\n    // dispatch(setRocket({x: width/2, y: rocket.y-10, colour: 'green'}))\n    if (blocksLine && blocksLine.length > 0) {\n      dispatch(moveLineDown())\n    }\n  }, 200)\n\n  useInterval(() => {\n    // dispatch(setRocket({x: width/2, y: rocket.y-10, colour: 'green'}))\n    // setCurrentRotation(currentRotation+5)\n  }, 500)\n\n  useEffect(() => {\n    // setW(window.innerWidth)\n    // setH(window.innerHeight)\n    dispatch(\n      setDimensions({ width: window.innerWidth, height: window.innerHeight })\n    )\n    // setStartX(window.innerWidth/2)\n    // setStartY(window.innerHeight)\n\n    dispatch(firstCenterBlock())\n\n    // dispatch(setRocket({x: width/2, y: height+blockSize+1, colour: 'green'}))\n\n    // dispatch(setRocket({x: width/2, y: height-blockSize, colour: 'green'}))\n\n    // dispatch(setRocket({x: width/2, y: (height/2)+100, colour: 'green'}))\n\n    // dispatch(setRocket({x: 0, y: 20, colour: 'green'}))\n  }, [])\n\n  // useEffect(()=>{\n  //   setInterval(() => {\n  //     setStartY(startY+1)\n  //   }, 200);\n  //   // if(startY === h){\n  //   //   setStartY(0)\n  //   // }\n  // }, [startY])\n\n  const doKeyDown = event => {\n    // if(event.code === \"Space\"){\n    //   console.log('space hit', startY)\n    //   const newVal = startY-1\n    //   console.log('new val', newVal)\n    //   setStartY(newVal)\n    // }\n    // console.log('keydown', event.code)\n  }\n\n  // useEffect(() => {\n  //   window.addEventListener('keydown', doKeyDown)\n  //   return () => window.removeEventListener('keydown', doKeyDown)\n  // }, [startY])\n\n  return (\n    <Layout>\n      {/* {console.log('current centerBlocks', centerBlocks)} */}\n\n      <SEO title=\"Game\" />\n      {/* <h1>!</h1> */}\n      {loading && <h2>{loading}</h2>}\n      {resultMessage && <h2>{resultMessage}</h2>}\n      <button\n        style={{ marginTop: \"10px\" }}\n        type=\"button\"\n        class=\"nes-btn is-primary\"\n        onClick={() => dispatch(start())}\n      >\n        Start\n      </button>\n      <button\n        style={{ marginTop: \"10px\" }}\n        type=\"button\"\n        class=\"nes-btn is-primary\"\n        onClick={() => {\n          if(!blocksLine){\n          const temp = [\n            { gender: \"male\", age: 10, expressions: [{ happy: 0.6 }] },\n          ]\n          dispatch(startLine(temp))\n        }\n        }}\n      >\n        test\n      </button>\n\n      {/* {rocket && <Block x={rocket.x} y={rocket.y} colour={rocket.colour}/>}\n    <div style={{position: 'absolute', transformOrigin:`${width/2}px ${(height/2)-blockSize/2}px`, transform: `rotate(${currentRotation}deg)`}}>\n    {centerBlocks.map((a)=> <Block key={`${a.x+a.y}`} x={a.x} y={a.y} colour={a.colour} rotation={0}/>)}\n    </div> */}\n\n      {blocksLine &&\n        blocksLine.map(a => (\n          <Block\n            key={`${a.x + a.y}`}\n            x={a.x}\n            y={a.y}\n            colour={a.colour}\n            rotation={0}\n          />\n        ))}\n\n      {console.log(\"wall\", wall)}\n      {wall &&\n        wall.map(b =>\n          b.map(a => (\n            <Block\n              key={`${a.x + a.y}`}\n              x={a.x}\n              y={a.y}\n              colour={a.colour}\n              rotation={0}\n            />\n          ))\n        )}\n\n      <FaceThing\n        results={a => {\n          const temp = []\n          a.forEach(a => {\n            temp.push({\n              gender: a.gender,\n              age: a.age,\n              expressions: a.expressions,\n            })\n            // dispatch(startLine({array:[\n            //   {gender: a.gender, }\n            // ]}))\n          })\n          if(!blocksLine){\n          dispatch(startLine(temp))\n          dispatch(setLoading(null))\n\n          }else{\n            dispatch(setLoading('Wait for the wall to be built'))\n          }\n          console.log(\"inside the thing\", a)\n        }}\n      />\n\n      {/* r gender, g age, b expression */}\n\n      {/* <Block x={startX} y={startY} colour='red'/>\n    <Block x={50} y={90} colour='green'/>\n    <Block x={0} y={0} colour='orange'/>\n    <Block x={0} y={0} colour='blue'/>\n\n    <Block x={w-40} y={h-40} colour='blue'/> */}\n      {/* <button onClick={()=>setStartY(startY+1)}>click</button> */}\n    </Layout>\n  )\n}\n\nexport default GamePage\n"],"sourceRoot":""}